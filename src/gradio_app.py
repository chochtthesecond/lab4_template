import gradio as gr
import joblib
import numpy as np
import pandas as pd

from config import app_config

model = joblib.load(app_config.path_to_modelfile)
FEATURE_NAMES = app_config.feature_names
CLASS_NAMES_MAP = {
    1: 'Mammal',
    2: 'Bird',
    3: 'Reptile',
    4: 'Fish',
    5: 'Amphibian',
    6: 'Bug',
    7: 'Invertebrate'
}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞
def predict_species(legs,*checks):
    processed_checks = [int(c) for c in checks]
    input_values = [legs] + processed_checks

    # –°–æ–∑–¥–∞–Ω–∏–µ Pandas DataFrame —Å –∏–º–µ–Ω–∞–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    input_df = pd.DataFrame([input_values], columns=FEATURE_NAMES)

    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    prediction = model.predict(input_df)

    numeric_pred = 0 # Default or error value
    numeric_pred = int(prediction[0])

    class_name = CLASS_NAMES_MAP.get(numeric_pred, f"Unknown class ({numeric_pred})")
    
    return class_name


# –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å gr.Blocks
with gr.Blocks(title="–ò–Ω—Ñ–µ—Ä–µ–Ω—Å –º–æ–¥–µ–ª–∏") as demo:
    gr.Markdown("## üêæ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ")

    with gr.Row():
        # –í—Ö–æ–¥–Ω—ã–µ —Å–ª–∞–π–¥–µ—Ä—ã –¥–ª—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
        # –ú–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞
        labels=['hair','feathers','eggs','milk','airborne','aquatic','predator','toothed','backbone','breathes','venomous','fins','legs','tail','domestic','catsize']
        checks=[]
        for x in labels:
            if x=='legs': break
            checks.append(gr.Checkbox(label=x))
        legs = gr.Slider(
            minimum=0, maximum=8, step=1, label="legs"
        )
        checks.append(legs)
        for x in labels[13:]:
            checks.append(gr.Checkbox(label=x))
            
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞
    predict_btn = gr.Button("–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –≤–∏–¥")

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    result = gr.Textbox(label="–†–µ–∑—É–ª—å—Ç–∞—Ç")

    # –°–≤—è–∑—å –∫–Ω–æ–ø–∫–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–∏
    predict_btn.click(
        fn=predict_species,
        inputs=[*checks],
        outputs=result,
    )

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    demo.launch()
